colnames(mat)<-c("Toughness Index",	"Yield Strength",	"Young's Modulus",
"Density",	"Thermal Expansion",	"Thermal Conductivity",	"Specific Heat")
rownames(mat)<-c("AI 2024-T6", "AI 5052-O","SS 301 FH",
"SS 310-3AH",
"Ti-6AI-4V",
"Inconel 718",
"70Cu-30Zn")
weights <- c(0.28, 0.14, 0.05, 0.24, 0.19, 0.05, 0.05)
beneficial.vector<-c(1,2,3)
results <- apply.ARAS(mat, weights, beneficial.vector)
dim(results)
results
expect_length(results, 8)
length(results)
type(results)
class(results)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
mat <- matrix(c(
5, 9, 2,
7, 3, 8,
6, 5, 4,
4, 7, 9
), nrow = 4, byrow = TRUE)
# Suppose columns 1 and 3 are beneficial
beneficial.vector <- c(1, 3)
# Get Borda scores and optionally plot the ranking
borda_scores <- apply.BORDA(mat, beneficial.vector, graph = TRUE, verbose = TRUE)
mat <- matrix(c(
5, 9, 2,
7, 3, 8,
6, 5, 4,
4, 7, 9
), nrow = 4, byrow = TRUE)
# Suppose columns 1 and 3 are beneficial
beneficial.vector <- c(1, 3)
# Get Borda scores and optionally plot the ranking
borda_scores <- apply.BORDA(mat, beneficial.vector)
borda_scores
devtools::test()
criteria.lst <- c("C1", "C2", "C3")
worst.criteria <- "C1"
best.criteria <- "C3"
best.criteria.preference <- c(8, 2, 1)
worst.criteria.preference <- c(1, 5, 8)
results <- apply.BWM(criteria.lst, worst.criteria, best.criteria, best.criteria.preference, worst.criteria.preference)
#'
results
type(results)
class(results)
devtools::test()
mat <- matrix(c(75.5, 95, 770, 187, 179, 239, 237,
420, 91, 1365, 1120, 875, 1190, 200,
74.2, 70, 189, 210, 112, 217, 112,
2.8, 2.68, 7.9, 7.9, 4.43, 8.51, 8.53,
21.4, 22.1, 16.9, 14.4, 9.4, 11.5, 19.9,
0.37, 0.33, 0.04, 0.03, 0.016, 0.31, 0.29,
0.16, 0.16, 0.08, 0.08, 0.09, 0.07, 0.06), nrow=7)
colnames(mat)<-c("Toughness Index",	"Yield Strength",	"Young's Modulus",
"Density",	"Thermal Expansion",	"Thermal Conductivity",	"Specific Heat")
rownames(mat)<-c("AI 2024-T6", "AI 5052-O","SS 301 FH",
"SS 310-3AH",
"Ti-6AI-4V",
"Inconel 718",
"70Cu-30Zn")
weights <- c(0.28, 0.14, 0.05, 0.24, 0.19, 0.05, 0.05)
beneficial.vector<-c(1,2,3)
results <- apply.COCOSO(mat, weights, beneficial.vector)
length(results)
devtools::test()
mat <- matrix(c(75.5, 95, 770, 187, 179, 239, 237,
420, 91, 1365, 1120, 875, 1190, 200,
74.2, 70, 189, 210, 112, 217, 112,
2.8, 2.68, 7.9, 7.9, 4.43, 8.51, 8.53,
21.4, 22.1, 16.9, 14.4, 9.4, 11.5, 19.9,
0.37, 0.33, 0.04, 0.03, 0.016, 0.31, 0.29,
0.16, 0.16, 0.08, 0.08, 0.09, 0.07, 0.06), nrow=7)
colnames(mat)<-c("Toughness Index",	"Yield Strength",	"Young's Modulus",
"Density",	"Thermal Expansion",	"Thermal Conductivity",	"Specific Heat")
rownames(mat)<-c("AI 2024-T6", "AI 5052-O","SS 301 FH",
"SS 310-3AH",
"Ti-6AI-4V",
"Inconel 718",
"70Cu-30Zn")
weights <- c(0.28, 0.14, 0.05, 0.24, 0.19, 0.05, 0.05)
beneficial.vector<-c(1,2,3)
psi <- 0.02
results <- apply.CODAS(mat, weights, beneficial.vector, psi)
results
devtools::test()
mat <- matrix(c(75.5, 95, 770, 187, 179, 239, 237,
420, 91, 1365, 1120, 875, 1190, 200,
74.2, 70, 189, 210, 112, 217, 112,
2.8, 2.68, 7.9, 7.9, 4.43, 8.51, 8.53,
21.4, 22.1, 16.9, 14.4, 9.4, 11.5, 19.9,
0.37, 0.33, 0.04, 0.03, 0.016, 0.31, 0.29,
0.16, 0.16, 0.08, 0.08, 0.09, 0.07, 0.06), nrow=7)
colnames(mat)<-c("Toughness Index",	"Yield Strength",	"Young's Modulus",
"Density",	"Thermal Expansion",	"Thermal Conductivity",	"Specific Heat")
rownames(mat)<-c("AI 2024-T6", "AI 5052-O","SS 301 FH",
"SS 310-3AH",
"Ti-6AI-4V",
"Inconel 718",
"70Cu-30Zn")
weights <- c(0.28, 0.14, 0.05, 0.24, 0.19, 0.05, 0.05)
beneficial.vector<-c(1,2,3)
psi <- 0.02
result <- apply.CODAS(mat, weights, beneficial.vector, psi)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::build("~/Desktop/RMCDA")
devtools::check("~/Desktop/RMCDA")
devtools::install("~/Desktop/RMCDA")
devtools::build("~/Desktop/RMCDA")
devtools::install("~/Desktop/RMCDA")
devtools::check("~/Desktop/RMCDA")
devtools::check("~/Desktop/RMCDA")
devtools::build("~/Desktop/RMCDA")
devtools::install("~/Desktop/RMCDA")
devtools::check("~/Desktop/RMCDA")
devtools::build("~/Desktop/RMCDA")
devtools::install("~/Desktop/RMCDA")
devtools::check("~/Desktop/RMCDA")
roxygen2::roxygenise("~/Desktop/RMCDA")
roxygen2::roxygenise("~/Desktop/RMCDA", roclets = c("namespace"))
problematic_names <- c("I'", "if", "or", "symmetrical", "tie")
# Scan all R files in the 'R/' directory
r_files <- list.files("~/Desktop/RMCDA/R", pattern = "\\.R$", full.names = TRUE)
# Search for problematic names and @export tags
for (file in r_files) {
lines <- readLines(file)
for (name in problematic_names) {
if (any(grepl(name, lines))) {
cat("Problematic name found in file:", file, "\n")
}
}
if (any(grepl("@export", lines))) {
cat("@export tag found in file:", file, "\n")
}
}
# List of problematic names
problematic_names <- c("I'", "if", "or", "symmetrical", "tie")
# Scan all R files in the 'R/' directory
r_files <- list.files("~/Desktop/RMCDA/R", pattern = "\\.R$", full.names = TRUE)
# Iterate over each file and check for issues
for (file in r_files) {
# Read the lines of the file
lines <- readLines(file, warn = FALSE)
# Check for problematic names
for (name in problematic_names) {
matches <- grep(name, lines, value = TRUE)
if (length(matches) > 0) {
cat("Problematic name '", name, "' found in file:", file, "\n")
cat("  Lines containing the issue:\n")
cat("  ", paste(matches, collapse = "\n  "), "\n")
}
}
# Check for @export tags
export_matches <- grep("@export", lines, value = TRUE)
if (length(export_matches) > 0) {
cat("@export tag found in file:", file, "\n")
cat("  Lines containing the @export tag:\n")
cat("  ", paste(export_matches, collapse = "\n  "), "\n")
}
}
# List of problematic names
problematic_names <- c("I'", "if", "or", "symmetrical", "tie")
# Scan all R files in the 'R/' directory
r_files <- list.files("~/Desktop/RMCDA/R", pattern = "\\.R$", full.names = TRUE)
# Iterate over each file and check for issues
for (file in r_files) {
# Read the lines of the file
lines <- readLines(file, warn = FALSE)
# Check for problematic names
for (name in problematic_names) {
matches <- grep(name, lines, value = TRUE)
if (length(matches) > 0) {
cat("Problematic name '", name, "' found in file:", file, "\n")
cat("  Lines containing the issue:\n")
cat("  ", paste(matches, collapse = "\n  "), "\n")
}
}
# Check for @export tags
export_matches <- grep("@export", lines, value = TRUE)
if (length(export_matches) > 0) {
cat("@export tag found in file:", file, "\n")
cat("  Lines containing the @export tag:\n")
cat("  ", paste(export_matches, collapse = "\n  "), "\n")
}
}
# List of problematic names
problematic_names <- c("I'", "symmetrical", "tie")
# Reserved words to ignore in syntax (e.g., `if` and `or`)
reserved_words <- c("if", "or")
# Scan all R files in the 'R/' directory
r_files <- list.files("~/Desktop/RMCDA/R", pattern = "\\.R$", full.names = TRUE)
# Iterate over each file and check for issues
for (file in r_files) {
# Read the lines of the file
lines <- readLines(file, warn = FALSE)
# Check for problematic names (excluding reserved words)
for (name in problematic_names) {
matches <- grep(paste0("\\b", name, "\\b"), lines, value = TRUE)
if (length(matches) > 0) {
cat("Problematic name '", name, "' found in file:", file, "\n")
cat("  Lines containing the issue:\n")
cat("  ", paste(matches, collapse = "\n  "), "\n")
}
}
# Check for @export tags
export_matches <- grep("@export", lines, value = TRUE)
if (length(export_matches) > 0) {
cat("@export tag found in file:", file, "\n")
cat("  Lines containing the @export tag:\n")
cat("  ", paste(export_matches, collapse = "\n  "), "\n")
}
}
# List of problematic names (e.g., reserved keywords causing issues)
problematic_names <- c("I'", "symmetrical", "tie")
# Scan all R files in the 'R/' directory
r_files <- list.files("~/Desktop/RMCDA/R", pattern = "\\.R$", full.names = TRUE)
# Iterate over each file and check for issues
for (file in r_files) {
# Read the lines of the file
lines <- readLines(file, warn = FALSE)
# Track issues for the current file
found_issues <- FALSE
# Check for problematic names
for (name in problematic_names) {
matches <- grep(paste0("\\b", name, "\\b"), lines, value = TRUE)
if (length(matches) > 0) {
found_issues <- TRUE
cat("\nProblematic name '", name, "' found in file:", file, "\n")
cat("  Lines containing the issue:\n")
cat("  ", paste(matches, collapse = "\n  "), "\n")
}
}
# Check for @export tags
export_matches <- grep("@export", lines, value = TRUE)
if (length(export_matches) > 0) {
found_issues <- TRUE
cat("\n@export tag found in file:", file, "\n")
cat("  Lines containing the @export tag:\n")
for (line in export_matches) {
cat("  ", line, "\n")
}
}
# If no issues were found, print a message
if (!found_issues) {
cat("\nNo issues found in file:", file, "\n")
}
}
# List of problematic names
problematic_names <- c("I'", "if", "or", "symmetrical", "tie")
# Scan all R files in the 'R/' directory
r_files <- list.files("~/Desktop/RMCDA/R", pattern = "\\.R$", full.names = TRUE)
# Iterate over each file
for (file in r_files) {
lines <- readLines(file, warn = FALSE)
# Find all @export lines
export_lines <- grep("@export", lines, value = TRUE)
if (length(export_lines) > 0) {
cat("\n@export tags found in file:", file, "\n")
for (line in export_lines) {
cat("  ", line, "\n")
}
}
# Find occurrences of problematic names
for (name in problematic_names) {
problematic_lines <- grep(paste0("\\b", name, "\\b"), lines, value = TRUE)
if (length(problematic_lines) > 0) {
cat("\nProblematic name '", name, "' found in file:", file, "\n")
cat("  Lines causing issues:\n")
for (line in problematic_lines) {
cat("  ", line, "\n")
}
}
}
}
# List of problematic names
problematic_names <- c("I'", "if", "or", "symmetrical", "tie")
# Scan all R files in the 'R/' directory
r_files <- list.files("~/Desktop/RMCDA/R", pattern = "\\.R$", full.names = TRUE)
# Iterate over each file
for (file in r_files) {
lines <- readLines(file, warn = FALSE)
# Find all @export lines
export_lines <- grep("@export", lines, value = TRUE)
if (length(export_lines) > 0) {
cat("\n@export tags found in file:", file, "\n")
for (line in export_lines) {
cat("  ", line, "\n")
}
}
# Find occurrences of problematic names
for (name in problematic_names) {
problematic_lines <- grep(paste0("\\b", name, "\\b"), lines, value = TRUE)
if (length(problematic_lines) > 0) {
cat("\nProblematic name '", name, "' found in file:", file, "\n")
cat("  Lines causing issues:\n")
for (line in problematic_lines) {
cat("  ", line, "\n")
}
}
}
}
devtools::build("~/Desktop/RMCDA")
devtools::install("~/Desktop/RMCDA")
devtools::install("~/Desktop/RMCDA")
devtools::check("~/Desktop/RMCDA")
devtools::install("~/Desktop/RMCDA")
devtools::check("~/Desktop/RMCDA")
tryCatch({
roxygen2::roxygenise("~/Desktop/RMCDA")
}, error = function(e) {
traceback()
})
devtools::document()
devtools::document()
devtools::document()
devtools::build("~/Desktop/RMCDA")
devtools::install("~/Desktop/RMCDA")
devtools::check("~/Desktop/RMCDA")
devtools::document()
devtools::document()
devtools::check("~/Desktop/RMCDA")
devtools::check("~/Desktop/RMCDA")
devtools::check("~/Desktop/RMCDA")
devtools::build("~/Desktop/RMCDA")
devtools::install("~/Desktop/RMCDA")
devtools::check("~/Desktop/RMCDA")
devtools::check("~/Desktop/RMCDA")
devtools::check("~/Desktop/RMCDA")
devtools::check("~/Desktop/RMCDA")
devtools::check("~/Desktop/RMCDA")
devtools::check("~/Desktop/RMCDA")
devtools::check("~/Desktop/RMCDA")
devtools::check("~/Desktop/RMCDA")
devtools::check("~/Desktop/RMCDA")
devtools::build("~/Desktop/RMCDA")
devtools::install("~/Desktop/RMCDA")
roxygen2::roxygenise("~/Desktop/RMCDA")
remove.packages("RMCDA")
install.packages("~/Desktop/RMCDA", repos = NULL, type = "source")
devtools::build("~/Desktop/RMCDA")
devtools::install("~/Desktop/RMCDA")
install.packages("lintr")
library(lintr)
lint_package("~/Desktop/RMCDA")
devtools::build("~/Desktop/RMCDA")
devtools::install("~/Desktop/RMCDA")
devtools::build("~/Desktop/RMCDA")
devtools::install("~/Desktop/RMCDA")
roxygen2::roxygenise("~/Desktop/RMCDA")
R CMD Rd2pd ~/Desktop/RMCDA
R CMD Rd2pdf ~/Desktop/RMCDA
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote("~/Desktop/RMCDA")))
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote("~/Desktop/RMCDA")))
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote("~/Desktop/RMCDA")))
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote("~/Desktop/RMCDA")))
devtools::build("~/Desktop/RMCDA")
devtools::install("~/Desktop/RMCDA")
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote("~/Desktop/RMCDA")))
roxygen2::roxygenise("~/Desktop/RMCDA")
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote("~/Desktop/RMCDA")))
devtools::build("~/Desktop/RMCDA")
devtools::install("~/Desktop/RMCDA")
roxygen2::roxygenise("~/Desktop/RMCDA")
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote("~/Desktop/RMCDA")))
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote("~/Desktop/RMCDA")))
use_vignette("HelpFile")
knitr::use_vignette("HelpFile")
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv(system.file("extdata", "AHP_input_file.csv", package = "RMCDA"), header=FALSE)
mat.lst <- read.csv.AHP.matrices(data)
mat.lst[[1]]->A
mat.lst[[2]]->comparing.competitors
results<- apply.AHP(A, comparing.competitors)
print(results)
data <- read.csv(system.file("extdata", "AHP_input_file.csv", package = "RMCDA"), header=FALSE)
mat.lst <- read.csv.AHP.matrices(data)
data <- read.csv(system.file("extdata", "AHP_input_file.csv", package = "RMCDA"), header=FALSE)
mat.lst <- read.csv.AHP.matrices(data)
mat.lst
mat.lst[[1]]->A
mat.lst[[2]]->comparing.competitors
results<- apply.AHP(A, comparing.competitors)
print(results)
rowSums(t(t(apply_conditional_formula(mat, beneficial.vector))^weights))
rowSums(t(t(norm.WSM(mat, beneficial.vector))^weights))
rowSums(t(t(norm.WSM(mat, beneficial.vector))^weights))
norm.WSM <- function(matrix, beneficial.vector) {
m <- nrow(matrix)
n <- ncol(matrix)
result_matrix <- matrix(0, nrow = m, ncol = n)
for (j in 1:n) {
if (j %in% beneficial.vector) {
X_max <- max(matrix[, j])
denominator <- sum(X_max - matrix[, j])
result_matrix[, j] <- 1 - (X_max - matrix[, j]) / denominator
} else {
X_min <- min(matrix[, j])
denominator <- sum(matrix[, j] - X_min)
result_matrix[, j] <- 1 - (matrix[, j] - X_min) / denominator
}
}
return(result_matrix)
}
rowSums(t(t(norm.WSM(mat, beneficial.vector))^weights))
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
