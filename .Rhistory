# Load required libraries
library(dplyr)
# Example from the comments: Read data from AHP input file
data <- read.csv(system.file("extdata", "AHP_input_file.csv", package = "RMCDA"), header = FALSE)
# Process the data into matrices using read.csv.AHP.matrices function (assumed to be defined)
mat.lst <- read.csv.AHP.matrices(data)
# Extract the criteria matrix and the list of competitors matrices
criteria_matrix <- mat.lst[[1]]
comparing_competitors <- mat.lst[[2]]
# Time the execution of the apply.AHP function
execution_time <- system.time({
results <- apply.AHP(criteria_matrix, comparing_competitors)
})
# Output the execution time and results
cat("Execution Time (in seconds):\n")
print(execution_time)
cat("\nAHP Results:\n")
print(results)
data
mat <- matrix(c(80, 60, 90,
75, 85, 95,
70, 65, 85,
60, 75, 80),
nrow = 4, byrow = TRUE);
colnames(mat) <- c("Criterion 1", "Criterion 2", "Criterion 3");
weights <- c(0.4, 0.3, 0.3);
beneficial.vector <- c(1, 2, 3);
apply.GRA(mat, weights, beneficial.vector)
mat
devtools::install()
devtools::build()
devtools::install()
devtools::install()
devtools::build()
devtools::check()
devtools::check()
devtools::document()
devtools::build()
devtools::build()
R CMD Rd2pdf /Users/annicenajafi/Desktop/RMCDA
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf --output=RMCDA_manual.pdf .")
devtools::build_manual()
devtools::document()
devtools::test()
devtools::test()
devtools::build_manual()
devtools::test()
devtools::check()
devtools::check()
devtools::build_manual()
devtools::build()
devtools::install()
mat <- matrix(c(80, 60, 90,
75, 85, 95,
70, 65, 85,
60, 75, 80),
nrow = 4, byrow = TRUE)
colnames(mat) <- c("Criterion 1", "Criterion 2", "Criterion 3")
beneficial.vector <- c(1, 2, 3)
apply.PSI(mat, beneficial.vector)
apply.MULTIMOORA(mat, beneficial.vector)
mat <- matrix(c(80, 60, 90,
75, 85, 95,
70, 65, 85,
60, 75, 80),
nrow = 4, byrow = TRUE)
colnames(mat) <- c("Criterion 1", "Criterion 2", "Criterion 3")
beneficial.vector <- c(1, 2, 3)
apply.PSI(mat, beneficial.vector)
mat <- matrix(c(250, 200, 300, 275, 225, 16, 16, 32, 32, 16, 12, 8, 16, 8, 16, 5, 3, 4, 4, 2), nrow=5, ncol=4)
colnames(mat) <- c("Price", "Storage space", "Camera", "Looks")
rownames(mat) <- paste0("Mobile ", seq(1, 5, 1))
mat[,"Price"] <- -mat[,"Price"]
apply.CRITIC(mat)
data <- read.csv(system.file("extdata", "AHP_input_file.csv", package = "RMCDA"), header=FALSE);
mat.lst <- read.csv.AHP.matrices(data);
mat.lst[[1]]->A;
mat.lst[[2]]->comparing.competitors;
results<- apply.AHP(A, comparing.competitors)
plot.AHP.decision.tree(A, comparing.competitors)
library(igraph)
plot.AHP.decision.tree(A, comparing.competitors)
plot.AHP.decision.tree(AHP.results, comparing.competitors)
plot.AHP.decision.tree(results, comparing.competitors)
plot.AHP.decision.tree <- function(A, comparing.competitors, results){
nodes <- c("Choose alternative",rownames(comparing.competitors[[1]]), rownames(A))
edges <- c()
for(idx in seq(1, length(rownames(A)), 1)){
edges <- c(edges, "Choose alternative")
edges <- c(edges, rownames(A)[idx])
}
for(idx in seq(1,length(rownames(comparing.competitors[[1]])), 1)){
for(idx.prod in seq(1, length(rownames(A)), 1)){
edges <- c(edges, rownames(A)[idx.prod])
edges <- c(edges, rownames(comparing.competitors[[1]])[idx])
}
}
edge_list <- matrix(edges, ncol = 2, byrow = TRUE)
weights <- c(results[[1]][[2]],
as.vector(results[[3]]))
g <- graph_from_edgelist(edge_list)
E(g)$weight <- weights
# Normalize the weights for better visualization (optional)
max_width <- 5  # Maximum edge width
edge_widths <- max_width * (weights / max(weights))
p <- plot(g,
layout = layout_as_tree(g, root = 1),  # Tree-like layout with root at the top
vertex.size = 50,  # Adjust node size
vertex.label.cex = 4,  # Font size for labels
vertex.label.color = "black",  # Label color
vertex.color="#9B7EBD",
edge.arrow.size = 5,  # Arrow size
edge.width = edge_widths*5,  # Edge widths based on weights
asp = 5,
main = "AHP Decision Tree with Weighted Edges")
return(p)
}
plot.AHP.decision.tree(A, comparing.competitors, results)
plot.AHP.decision.tree <- function(A, comparing.competitors, results, vertex_font=1.2, edge_font = 1, asp = 0.8){
nodes <- c("Choose alternative",rownames(comparing.competitors[[1]]), rownames(A))
edges <- c()
for(idx in seq(1, length(rownames(A)), 1)){
edges <- c(edges, "Choose alternative")
edges <- c(edges, rownames(A)[idx])
}
for(idx in seq(1,length(rownames(comparing.competitors[[1]])), 1)){
for(idx.prod in seq(1, length(rownames(A)), 1)){
edges <- c(edges, rownames(A)[idx.prod])
edges <- c(edges, rownames(comparing.competitors[[1]])[idx])
}
}
edge_list <- matrix(edges, ncol = 2, byrow = TRUE)
weights <- c(results[[1]][[2]],
as.vector(results[[3]]))
g <- graph_from_edgelist(edge_list)
E(g)$weight <- weights
# Normalize the weights for better visualization (optional)
max_width <- 5  # Maximum edge width
edge_widths <- max_width * (weights / max(weights))
p <- plot(g,
layout = layout_as_tree(g, root = 1),  # Tree-like layout with root at the top
vertex.size = 50,  # Adjust node size
vertex.label.cex = vertex_font,  # Font size for labels
vertex.label.color = "black",  # Label color
vertex.color="#9B7EBD",
edge.arrow.size = edge_font,  # Arrow size
edge.width = edge_widths*edge_font,  # Edge widths based on weights
asp = asp,
main = "AHP Decision Tree with Weighted Edges")
return(p)
}
plot.AHP.decision.tree(A, comparing.competitors, results)
plot.AHP.decision.tree <- function(A, comparing.competitors, results, vertex_font=1.2, edge_font = 1,
asp = 0.8, max_width = 5, vertex_size=50){
nodes <- c("Choose alternative",rownames(comparing.competitors[[1]]), rownames(A))
edges <- c()
for(idx in seq(1, length(rownames(A)), 1)){
edges <- c(edges, "Choose alternative")
edges <- c(edges, rownames(A)[idx])
}
for(idx in seq(1,length(rownames(comparing.competitors[[1]])), 1)){
for(idx.prod in seq(1, length(rownames(A)), 1)){
edges <- c(edges, rownames(A)[idx.prod])
edges <- c(edges, rownames(comparing.competitors[[1]])[idx])
}
}
edge_list <- matrix(edges, ncol = 2, byrow = TRUE)
weights <- c(results[[1]][[2]],
as.vector(results[[3]]))
g <- graph_from_edgelist(edge_list)
E(g)$weight <- weights
edge_widths <- max_width * (weights / max(weights))
p <- plot(g,
layout = layout_as_tree(g, root = 1),  # Tree-like layout with root at the top
vertex.size = vertex_size,  # Adjust node size
vertex.label.cex = vertex_font,  # Font size for labels
vertex.label.color = "black",  # Label color
vertex.color="#9B7EBD",
edge.arrow.size = edge_font,  # Arrow size
edge.width = edge_widths*edge_font,  # Edge widths based on weights
asp = asp,
main = "AHP Decision Tree with Weighted Edges")
return(p)
}
plot.AHP.decision.tree(A, comparing.competitors, results, vertex_font=1.2, edge_font = 1,
asp = 0.8, max_width = 5, vertex_size=50)
plot.AHP.decision.tree(A, comparing.competitors, results, vertex_font=1.2, edge_font = 1,
asp = 0.8, max_width = 5, vertex_size=40)
plot.AHP.decision.tree(A, comparing.competitors, results)
devtools::install(build = TRUE)
devtools::build()
devtools::check()
devtools::document()
devtools::install(build = TRUE)
devtools::check()
devtools::document
devtools::document()
roxygen2::roxygenise()
devtools::build_manual()
devtools::check(manual = TRUE)
library(RMCDA)
library(microbenchmark)
library(dplyr)
# Function to generate a reciprocal pairwise comparison matrix of size n
generate_random_ahp_matrix <- function(n) {
A <- matrix(NA, n, n)
for(i in 1:n){
for(j in 1:n){
if(i == j){
A[i, j] <- 1
} else if(i < j){
A[i, j] <- runif(1, min = 1, max = 9)
A[j, i] <- 1 / A[i, j]
}
}
}
return(A)
}
# Function to generate a reciprocal competitor comparison matrix for alternatives (size alt x alt)
generate_random_competitor_matrix <- function(alt) {
B <- matrix(NA, alt, alt)
for(i in 1:alt){
for(j in 1:alt){
if(i == j){
B[i, j] <- 1
} else if(i < j){
B[i, j] <- runif(1, min = 1, max = 9)
B[j, i] <- 1 / B[i, j]
}
}
}
return(B)
}
# Define the criteria sizes for the stress test and set a fixed number of alternatives (e.g., 10)
criteria_sizes <- c(5, 10, 20, 50, 100)
num_alternatives <- 10
# Data frame to store stress test results
stress_test_results <- data.frame(criteria_size = criteria_sizes, median_time_ms = NA)
# Loop over each criteria size and measure the execution time of apply.AHP
for(i in seq_along(criteria_sizes)){
n <- criteria_sizes[i]
# Generate the criteria comparison matrix (n x n)
crit_matrix <- generate_random_ahp_matrix(n)
# Generate a list of competitor matrices; one for each criterion (each competitor matrix is num_alternatives x num_alternatives)
competitor_list <- lapply(1:n, function(x) generate_random_competitor_matrix(num_alternatives))
# Use microbenchmark to measure the execution time of apply.AHP over 100 iterations
mbm <- microbenchmark(apply.AHP(crit_matrix, competitor_list), times = 100)
# Record the median time in milliseconds
stress_test_results$median_time_ms[i] <- median(mbm$time) / 1e6
}
generate_consistent_ahp_matrix <- function(n) {
# Generate a random weight vector
w <- runif(n, min = 0.1, max = 1)
w <- w / sum(w)
# Create a consistent pairwise comparison matrix: A[i,j] = w[i] / w[j]
A <- outer(w, w, FUN = "/")
return(A)
}
library(microbenchmark)
library(dplyr)
# Function to generate a consistent criteria comparison matrix
generate_consistent_ahp_matrix <- function(n) {
w <- runif(n, min = 0.1, max = 1)
w <- w / sum(w)
A <- outer(w, w, FUN = "/")
return(A)
}
# For competitors, you might still use a random consistent approach.
# For simplicity, let's generate consistent competitor matrices as well.
generate_consistent_competitor_matrix <- function(n) {
w <- runif(n, min = 0.1, max = 1)
w <- w / sum(w)
B <- outer(w, w, FUN = "/")
return(B)
}
# Define criteria sizes for the stress test and fixed number of alternatives (e.g., 10)
criteria_sizes <- c(5, 10, 20, 50, 100)
num_alternatives <- 10
# Data frame to store stress test results
stress_test_results <- data.frame(criteria_size = criteria_sizes, median_time_ms = NA)
# Loop over each criteria size and measure the execution time of apply.AHP
for(i in seq_along(criteria_sizes)){
n <- criteria_sizes[i]
# Generate a consistent criteria matrix of size n x n
crit_matrix <- generate_consistent_ahp_matrix(n)
# Generate a list of consistent competitor matrices; one per criterion
competitor_list <- lapply(1:n, function(x) generate_consistent_competitor_matrix(num_alternatives))
# Use microbenchmark to measure the execution time of apply.AHP over 100 iterations
mbm <- microbenchmark(apply.AHP(crit_matrix, competitor_list), times = 100)
# Record the median time in milliseconds
stress_test_results$median_time_ms[i] <- median(mbm$time) / 1e6
}
library(microbenchmark)
library(dplyr)
# Original random matrix generator
generate_random_ahp_matrix <- function(n) {
A <- matrix(NA, n, n)
for(i in 1:n){
for(j in 1:n){
if(i == j){
A[i, j] <- 1
} else if(i < j){
A[i, j] <- runif(1, min = 1, max = 9)
A[j, i] <- 1 / A[i, j]
}
}
}
return(A)
}
# Helper function: generate a random matrix until it is consistent (CI/RI < 0.1)
generate_consistent_ahp_matrix <- function(n, max_attempts = 1000) {
attempt <- 1
repeat {
A <- generate_random_ahp_matrix(n)
# Try running find.weight, and if error occurs (inconsistency), try again.
res <- tryCatch({
find.weight(A)
}, error = function(e) {
NULL
})
if (!is.null(res)) {
# Consistent matrix generated
return(A)
}
attempt <- attempt + 1
if(attempt > max_attempts) {
stop("Failed to generate a consistent matrix after ", max_attempts, " attempts.")
}
}
}
# Similarly, generate a competitor matrix that is consistent
generate_consistent_competitor_matrix <- function(n, max_attempts = 1000) {
attempt <- 1
repeat {
B <- generate_random_ahp_matrix(n)
res <- tryCatch({
find.weight(B)
}, error = function(e) {
NULL
})
if (!is.null(res)) {
return(B)
}
attempt <- attempt + 1
if(attempt > max_attempts) {
stop("Failed to generate a consistent competitor matrix after ", max_attempts, " attempts.")
}
}
}
# Define the criteria sizes for the stress test and a fixed number of alternatives (e.g., 10)
criteria_sizes <- c(5, 10, 20, 50, 100)
num_alternatives <- 10
# Data frame to store stress test results
stress_test_results <- data.frame(criteria_size = criteria_sizes, median_time_ms = NA)
# Loop over each criteria size and measure the execution time of apply.AHP
for(i in seq_along(criteria_sizes)){
n <- criteria_sizes[i]
# Generate a consistent criteria matrix of size n x n
crit_matrix <- generate_consistent_ahp_matrix(n)
# Generate a list of consistent competitor matrices; one per criterion
competitor_list <- lapply(1:n, function(x) generate_consistent_competitor_matrix(num_alternatives))
# Use microbenchmark to measure the execution time of apply.AHP over 100 iterations
mbm <- microbenchmark(apply.AHP(crit_matrix, competitor_list), times = 100)
# Record the median time in milliseconds
stress_test_results$median_time_ms[i] <- median(mbm$time) / 1e6
}
library(microbenchmark)
library(dplyr)
# Function to generate a perfectly consistent AHP matrix using a random weight vector
generate_consistent_ahp_matrix <- function(n) {
w <- runif(n, min = 0.1, max = 1)
w <- w / sum(w)
A <- outer(w, w, FUN = "/")
return(A)
}
# For competitors, generate a consistent matrix similarly
generate_consistent_competitor_matrix <- function(n) {
w <- runif(n, min = 0.1, max = 1)
w <- w / sum(w)
B <- outer(w, w, FUN = "/")
return(B)
}
# Define criteria sizes for the stress test and a fixed number of alternatives (e.g., 10)
criteria_sizes <- c(5, 10, 20, 50, 100)
num_alternatives <- 10
# Data frame to store stress test results
stress_test_results <- data.frame(criteria_size = criteria_sizes, median_time_ms = NA)
# Loop over each criteria size and measure the execution time of apply.AHP
for(i in seq_along(criteria_sizes)){
n <- criteria_sizes[i]
# Generate a consistent criteria matrix of size n x n
crit_matrix <- generate_consistent_ahp_matrix(n)
# Generate a list of consistent competitor matrices; one for each criterion
competitor_list <- lapply(1:n, function(x) generate_consistent_competitor_matrix(num_alternatives))
# Use microbenchmark to measure the execution time of apply.AHP over 100 iterations
mbm <- microbenchmark(apply.AHP(crit_matrix, competitor_list), times = 100)
# Record the median time in milliseconds
stress_test_results$median_time_ms[i] <- median(mbm$time) / 1e6
}
library(microbenchmark)
library(dplyr)
# Function to generate a perfectly consistent AHP matrix using a random weight vector.
generate_consistent_ahp_matrix <- function(n) {
w <- runif(n, min = 0.1, max = 1)
w <- w / sum(w)
A <- outer(w, w, FUN = "/")
return(A)
}
# For competitors, generate a consistent matrix similarly.
generate_consistent_competitor_matrix <- function(n) {
w <- runif(n, min = 0.1, max = 1)
w <- w / sum(w)
B <- outer(w, w, FUN = "/")
return(B)
}
# Define the criteria sizes for the stress test (restricted to 2–10)
criteria_sizes <- 2:10
num_alternatives <- 10  # fixed number of alternatives
# Data frame to store stress test results
stress_test_results <- data.frame(criteria_size = criteria_sizes, median_time_ms = NA)
# Loop over each criteria size and measure the execution time of apply.AHP
for(i in seq_along(criteria_sizes)){
n <- criteria_sizes[i]
# Generate a consistent criteria matrix of size n x n
crit_matrix <- generate_consistent_ahp_matrix(n)
# Generate a list of consistent competitor matrices; one per criterion
competitor_list <- lapply(1:n, function(x) generate_consistent_competitor_matrix(num_alternatives))
# Use microbenchmark to measure the execution time of apply.AHP over 100 iterations
mbm <- microbenchmark(apply.AHP(crit_matrix, competitor_list), times = 100)
# Record the median time in milliseconds
stress_test_results$median_time_ms[i] <- median(mbm$time) / 1e6
}
R CMD check --as-cran .
devtools::check(cran = TRUE)
devtools::check(cran = TRUE)
devtools::check(cran = TRUE)
pkg_funs <- ls("package:matrixStats")
ls("package:matrixStats")
library(matrixStats)
ls("package:matrixStats")
pkg_funs <- ls("package:matrixStats")
# 2. Find which of those names actually appear in your R/*.R files
r_files <- list.files("R", pattern = "\\.R$", full.names = TRUE)
used <- vapply(pkg_funs, function(fn) {
any(grepl(paste0("\\b", fn, "\\b"), readLines(r_files), perl=TRUE))
}, logical(1))
# 1. Get all exported names from matrixStats
pkg_funs <- ls("package:matrixStats")
# 2. List your R scripts
r_files <- list.files("R", pattern = "\\.R$", full.names = TRUE)
# 3. Scan each function name against each file
used <- vapply(pkg_funs, function(fn) {
pattern <- paste0("\\b", fn, "\\b")
# check every R file, stop at first hit
any(vapply(r_files,
function(f) any(grepl(pattern, readLines(f), perl = TRUE)),
logical(1)))
}, logical(1))
# 4. Show only the TRUEs
used_funs <- pkg_funs[used]
cat("matrixStats functions actually used in your code:\n")
print(sort(used_funs))
devtools::check(cran = TRUE)
devtools::document()
devtools::check(cran = TRUE)
# 1. All matrixStats exports
pkg_funs <- ls("package:matrixStats")
# 2. Your R scripts
r_files <- list.files("R", "\\.R$", full.names=TRUE)
# 3. For each file, see which of those names show up
used_by_file <- lapply(r_files, function(f) {
txt <- readLines(f, warn=FALSE)
# return the subset of pkg_funs that appear in this file
pkg_funs[ vapply(pkg_funs,
function(fn) any(grepl(paste0("\\b", fn, "\\b"), txt)),
logical(1)) ]
})
# 4. Drop files where none are used, and print
used_by_file <- Filter(length, used_by_file)
str(used_by_file, max.level=2)
used_by_file
devtools::document()
devtools::check(cran = TRUE)
devtools::document()
devtools::document()
devtools::check(cran = TRUE)
# 1) get all exports from matrixStats
pkg_funs <- ls("package:matrixStats")
# 2) list your R scripts
r_files <- list.files("R", pattern="\\.R$", full.names=TRUE)
# 3) scan each file for any of those names
used_by_file <- lapply(r_files, function(f) {
txt <- readLines(f, warn=FALSE)
# find which of pkg_funs appear in this file
hits <- pkg_funs[vapply(pkg_funs,
function(fn) any(grepl(paste0("\\b", fn, "\\b"), txt, perl=TRUE)),
logical(1))]
if(length(hits)) data.frame(file = basename(f), fun = hits, stringsAsFactors=FALSE)
else NULL
})
# 4) combine and print
used_by_file <- do.call(rbind, used_by_file)
print(used_by_file)
devtools::document()
devtools::check(cran = TRUE)
devtools::document()
devtools::check(cran = TRUE)
devtools::check(cran = TRUE)
devtools::document()
devtools::document()
devtools::check(cran = TRUE)
