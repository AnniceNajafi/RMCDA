% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/REGIME.R
\name{apply.REGIME}
\alias{apply.REGIME}
\title{Apply REGIME method (using a beneficial.vector)}
\usage{
apply.REGIME(mat, beneficial.vector, weights, doPreOrder = FALSE)
}
\arguments{
\item{mat}{A numeric matrix of size n x m (n alternatives, m criteria).}

\item{beneficial.vector}{An integer vector of columns that are beneficial ("max").
All other columns are assumed to be "min".}

\item{weights}{A numeric vector of length m, containing weights for each criterion.}

\item{doPreOrder}{A logical. If TRUE, the function also calls apply.po.ranking
on the resulting cp.matrix and returns both the matrix and the partial-order
results in a list.}
}
\value{
\itemize{
\item If doPreOrder = FALSE, returns an n x n character matrix cp.matrix.
\item If doPreOrder = TRUE, returns a list with two elements:
\itemize{
\item cp.matrix: the character matrix
\item po.result: the output from apply.po.ranking
}
}
}
\description{
This function implements the REGIME method of pairwise comparisons to produce a
character matrix (cp.matrix) that marks each pair of alternatives as either
"P+" (row dominates column), "I" (indifferent), or "-" (for diagonals).
}
\details{
It uses a beneficial.vector of column indices for "max" criteria. Columns not in
beneficial.vector are treated as "min". The function can optionally run
apply.po.ranking on the resulting matrix for partial-order analysis.

#' 1. Weights Normalization: We first normalize weights so they sum to 1.
2. Pairwise Comparison Matrix g_ind:
For each pair of alternatives i, k, and each criterion j:
- If j is beneficial (max) and X\link{i, j} >= X\link{k, j}, we add weights\link{j} to g_ind\link{i, k}.
Otherwise, subtract weights\link{j}.
- If j is non-beneficial (min) and X\link{i, j} < X\link{k, j}, we add weights\link{j}.
Otherwise, subtract.
3. cp.matrix:
- "P+" if g_ind\link{i, k} > 0
- "I" if g_ind\link{i, k} == 0 or g_ind\link{i, k} == g_ind\link{k, i}
- "-" for diagonal entries (i == k)
4. If doPreOrder = TRUE, we call apply.po.ranking on cp.matrix to merge 'I'
and build a partial order.
}
\examples{
# Example data: 3 alternatives x 2 criteria
mat <- matrix(c(10, 5,
                12, 4,
                11, 6), nrow = 3, byrow = TRUE)

# Suppose first column is beneficial, second is non-beneficial
benef.vec <- c(1)  # means col1 is "max", col2 is "min"
wts <- c(0.6, 0.4)

# Call apply.REGIME without partial-order
regime.out <- apply.REGIME(mat, benef.vec, wts, doPreOrder = FALSE)
print(regime.out)

# Or with partial-order
regime.out2 <- apply.REGIME(mat, benef.vec, wts, doPreOrder = TRUE)
print(regime.out2$cp.matrix)
print(regime.out2$po.result)

}
